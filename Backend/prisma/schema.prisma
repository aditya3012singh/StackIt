generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  NEW_ANSWER       // Someone answered your question
  NEW_COMMENT      // Someone commented on your question or answer
  MENTION          // You were mentioned using @username
  TAG_ADDED        // Someone added or edited tags on your question
  MESSAGE          // New chat message
}

model User {
  id               String          @id @default(uuid())
  name             String        
  email            String          @unique
  password         String?
  role             Role            @default(USER)

  profileImage     String?         // âœ… Optional URL for profile photo

  // Relations
  questions        Question[]      @relation("UserQuestions")
  answers          Answer[]        @relation("UserAnswers")
  comments         Comment[]       @relation("UserComments")
  votes            Vote[]
  notifications    Notification[]
  chatMessages     ChatMessage[]
  chatRooms        ChatRoom[]      @relation("ChatParticipants")
  accounts         Account[]       // For OAuth

  // XP / Streaks
  xp               Int             @default(0)
  lastActivityDate DateTime?
  currentStreak    Int             @default(0)
  longestStreak    Int             @default(0)

  createdAt        DateTime        @default(now())
}


model Account {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  provider           String   // e.g., 'google', 'github'
  providerAccountId  String   // e.g., Google UID
  access_token       String?
  refresh_token      String?
  expires_at         Int?

  @@unique([provider, providerAccountId])
}

model Question {
  id          String       @id @default(uuid())
  title       String
  description String
  author      User         @relation("UserQuestions", fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]        @relation("QuestionTags")
  answers     Answer[]
  comments    Comment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Answer {
  id          String     @id @default(uuid())
  description String
  author      User       @relation("UserAnswers", fields: [authorId], references: [id])
  authorId    String
  question    Question   @relation(fields: [questionId], references: [id])
  questionId  String
  votes       Vote[]
  isAccepted  Boolean    @default(false)
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  author      User       @relation("UserComments", fields: [authorId], references: [id])
  authorId    String

  question    Question?  @relation(fields: [questionId], references: [id])
  questionId  String?

  answer      Answer?    @relation(fields: [answerId], references: [id])
  answerId    String?

  createdAt   DateTime   @default(now())
}

model Vote {
  id        String     @id @default(uuid())
  type      VoteType
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  answer    Answer     @relation(fields: [answerId], references: [id])
  answerId  String
  createdAt DateTime   @default(now())

  @@unique([userId, answerId]) // Prevent double voting
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  questions Question[]   @relation("QuestionTags")
  followers Int        @default(0)
}

model Notification {
  id            String            @id @default(uuid())
  type          NotificationType
  content       String
  link          String?           // e.g., /questions/q123#answer-xyz
  recipient     User              @relation(fields: [recipientId], references: [id])
  recipientId   String
  read          Boolean           @default(false)
  createdAt     DateTime          @default(now())
}

model ChatRoom {
  id        String        @id @default(uuid())
  isGroup   Boolean       @default(false)
  name      String?
  members   User[]        @relation("ChatParticipants")
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
}

model ChatMessage {
  id        String     @id @default(uuid())
  content   String
  sender    User       @relation(fields: [senderId], references: [id])
  senderId  String
  room      ChatRoom   @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime   @default(now())
}

